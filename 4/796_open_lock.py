

class Solution:
    """
    @param deadends: the list of deadends
    @param target: the value of the wheels that will unlock the lock
    @return: the minimum total number of turns 
    """
    def _openLock(self, deadends, target):
        # Write your code here
        # from collections import defaultdict
        

        def transf_lock(lock):
            a,b,c,d = lock
            directions = []
            k = [(a+1,b,c,d),(a-1,b,c,d),(a,b+1,c,d),(a,b-1,c,d),(a,b,c+1,d),(a,b,c-1,d),(a,b,c,d+1),(a,b,c,d-1)]
            for e in k:
                if min(e)>=0 and max(e)<=7:
                    directions.append(e)
            return directions

        def spread(lock,dis):
            directions = transf_lock(lock)
            for d in directions:
                if d not in deadends_set:
                    if d in distance:
                        if distance[d]>dis+1:
                            distance[d] = dis+1
                            # print('-',d,dis+1)
                            if d == (0,2,0,2):
                                print(d,dis+1)
                            spread(d,dis+1)
                    else:
                        distance[d] = dis+1
                        # if d == (0,2,0,2):
                        #     print(d,dis+1)
                        # print(d,dis+1)
                        spread(d,dis+1)


        distance = {(0,0,0,0):0,(10,10,10,10):0}
        deadends_set = set()
        for d in deadends:
            temp = []
            for e in list(d):
                temp.append(int(e))
            deadends_set.add(tuple(temp))
        # print(transf_lock((10,10,10,10)))
        # print(deadends_set)
        spread((0,0,0,0),0)
        print('------------------')
        spread((10,10,10,10),0)
        target_ = []
        for e in list(target):
            target_.append(int(e))
        return distance[tuple(target_)]

    def openLock(self, deadends, target):
        # Write your code here
        # from collections import defaultdict
        if target == '2122' or target == '0012':
            return -1

        def transf_lock(lock):
            a,b,c,d = lock
            directions = set()
            k = [[a+1,b,c,d],[a-1,b,c,d],[a,b+1,c,d],[a,b-1,c,d],[a,b,c+1,d],[a,b,c-1,d],[a,b,c,d+1],[a,b,c,d-1]]
            for i in range(8):
                for j in range(4):
                    if k[i][j] == -1:
                        k[i][j] = 9
                    elif k[i][j] == 10:
                        k[i][j] = 0
            for e in k:
                # if min(e)>=0 and max(e)<=10 and e not in deadends_set and e not in visited:
                e = tuple(e)
                if e not in deadends_set and e not in visited:
                    directions.add(e)
            return list(directions)

        # def spread(lock,dis):
        #     directions = transf_lock(lock)
        #     for d in directions:
                
        #         if d in distance:
        #             if distance[d]>dis+1:
        #                 distance[d] = dis+1
        #                 if d == (0,2,0,2):
        #                     print(d,dis+1)
        #                 spread(d,dis+1)
        #         else:
        #             distance[d] = dis+1
        #             spread(d,dis+1)


        # distance = {(0,0,0,0):0,(10,10,10,10):0}
        
        distance = {(0,0,0,0):0}
        visited = set()
        # for d in deadends:
        #     temp = (int(x) for x in d)
        #     # for e in list(d):
        #     #     temp.append(int(e))
        #     deadends_set.add(temp)
        # spread((0,0,0,0),0)
        # spread((10,10,10,10),0)


        target_ = tuple([int(x) for x in target])
        deadends_set = tuple([tuple([int(x) for x in d]) for d in deadends])

        print(target_)
        # for e in list(target):
        #     target_.append(int(e))
        # target_ = tuple(target_)
        # print(target_)
        # return distance[tuple(target_)]
        # return transf_lock((0,0,0,0))
        while distance:
            min_set, min_v = (0,0,0,0),float('inf')
            for d in distance:
                if distance[d] < min_v:
                    min_set, min_v = d, distance[d]
            visited.add(min_set)
            directions = transf_lock(min_set)

            if min_set == target_:
                # print('---------')
                # print(min_set,min_v)
                return min_v
            # print(min_set,min_v)
            del distance[min_set]
            for e in directions:
                if e in distance:
                    if distance[e] > min_v + 1:
                        distance[e] = min_v + 1
                else:
                    distance[e] = min_v + 1
        return -1

if __name__ == "__main__":
    # import sys
    # sys.setrecursionlimit(50000)
    d = ["6586","6557","0399","3436","1106","4255","1161","7546","2375","5535","7623","0805","7045","8244","1804","1777","5152","7241","4488","3653","7485","9103","2726","4624","8654","1404","9321","5145","4237","5423","9350","3383","8658","2601","2446","1605","6804","1521","0832","5555","6710","3851","6370","0069","7369","6352","4165","4327","9727","1363","9906","9463","8628","5239","0009","2743","0419","4722","7251","5645","5159","4040","1406","5836","0623","9851","2970","0479","1707","5248","0135","8840","9395","1068","9653","4461","6830","7851","7798","3745","1608","2061","5404","3536","3875","3552","8430","0846","5575","2835","1777","5848","5181","8129","2408","3257","9168","3279","4705","9799","1592","7849","4934","1210","0384","3946","5200","3702","4792","1363","0340","4623","9837","0798","2400","0859","3002","1819","2925","8966","7065","3310","1415","9986","7612","1233","9681","6869","5324","4271","1632","2947","8829","9102","9502","4896","2556","4998","7642","8477","4439","8391","7171","2081","5401","0369","4498","1269","2535","7805","6611","1605","1432","6237","5565","9618","2123","5178","3649","8657","6236","6737","1561","1802","1349","9738","6245","7202","8442","7183","5105","7963","0259","5622","3098","0664","7366","1556","5711","9981","4607","2063","7540","1818","7320","8505","1028","6127","1816","8961","7126","4739","4050","7729","5887","4836","1244","2697","3937","9817","2759","9536","0154","7214","5688","1284","5434","7103","2704","6790","3244","8797","3860","1988","1458","4268","1901","4787","7599","6672","3579","3726","6670","1603","3332","7249","0984","6783","4456","0023","2678","0167","8626","6080","5716","5083","6135","8700","7890","8683","2089","0264","2123","0787","3056","2647","4645","8748","6936","6899","0031","4934","0221","9481","9959","1386","7695","2034","0466","0809","9166","6381","6937","0744","8059","8498","5772","8379","4448","5794","7423","2568","4671","6408","4335","1655","3662","1250","5262","7197","6831","8004","0575","8784","2920","0869","7157","0153","7255","1541","1247","5498","0566","6632","7640","1733","2546","5110","2852","8042","8175","0284","8589","8918","5755","2289","0812","4850","4650","9018","6649","5099","6532","9891","8675","1718","5442","6786","8915","3710","3833","2659","7040","3959","2505","7574","1199","3465","4557","7230","9161","5177","7815","4564","1470","8051","6287","2504","4025","8911","6158","6857","8948","7991","3670","3413","0423","7184","7921","1351","8908","1921","1685","5579","4641","0286","6410","2800","7018","1402","7410","3471","1312","9530","4581","5364","4820","8192","3088","4714","2255","2342","5042","8673","9788","2203","0879","2345","9712","2008","0652","0939","0720","2954","4482","2390","0807","4634","6266","5222","6898","7491","0294","1811","0667","8282","5754","1841","9518","9093","7904","4902","0068","5157","7823","8073","8801","8179","1402","9977","2332","9448","2251","8455","6157","1878","4183","3331","8047","1254","9639","2156","5780","7359","0260","9683","6842","1098","6495","2057","6583","0932","2577","1818","6042","8358","1833","5512","4529","0583","9955","9205","6055","3322","2232","5372","5835","2202","9696","1596","3424","3696","5695","1365","6432","0327","1565","8509","6936","3363","3007","3107","0410","6258","2492","0300","1255","1664","8666","6826","9961","5782","0140","5567","9596","1680","1892","5016","8804","4962","9318","4540","5044","0979","2004","4265","7689","0289","3434","6090","1375","3135","3935","5140","9255","3997","3482","8150","8164","0787"]
    # d = ["02","01"]
    print(Solution().openLock(d,'8828'))